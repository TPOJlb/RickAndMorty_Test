//
//  CharacterDetailsViewController.swift
//  RickAndMorty_Test
//
//  Created by Muraviov Kyrylo on 30.03.2025.
//  Copyright (c) 2025 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CharacterDetailsDisplayLogic: AnyObject {
    func displayCharacter(viewModel: CharacterDetails.GetCharacter.ViewModel)
}

class CharacterDetailsViewController: UIViewController {
    
    // MARK: - Internal vars
    var interactor: CharacterDetailsBusinessLogic?
    var router: (CharacterDetailsRoutingLogic & CharacterDetailsDataPassing)?
    private let characterDetailsView = CharacterDetailsView()
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: - Lifecycle
    override func loadView() {
        view = characterDetailsView
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
        getCharacter()
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        addObservers()
    }
    
    override func viewWillTransition(to size: CGSize, with coordinator: UIViewControllerTransitionCoordinator) {
        super.viewWillTransition(to: size, with: coordinator)
        self.characterDetailsView.updateeConstraints()
    }
    
    // MARK: - Setup
    private func setup() {
        let viewController = self
        let interactor = CharacterDetailsInteractor()
        let presenter = CharacterDetailsPresenter()
        let router = CharacterDetailsRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: - Deinit
    deinit {
        removeObservers()
    }
}


// MARK: - Display logic implementation
extension CharacterDetailsViewController: CharacterDetailsDisplayLogic {
    func displayCharacter(viewModel: CharacterDetails.GetCharacter.ViewModel) {
        guard let view = self.view as? CharacterDetailsView else { return }
        let displayedCharacter = viewModel.displayedCharacter
        view.configure(name: displayedCharacter.name,
                       image: displayedCharacter.image,
                       ID: displayedCharacter.id,
                       status: displayedCharacter.status,
                       species: displayedCharacter.species,
                       gender: displayedCharacter.gender,
                       created: displayedCharacter.created)
    }
}

// MARK: - Internal logic
extension CharacterDetailsViewController {
    private func getCharacter() {
        let request = CharacterDetails.GetCharacter.Request()
        interactor?.getCharacter(request: request)
    }
    
    private func addObservers() {
        NotificationCenter.default.addObserver(self, selector: #selector(imageDownloaded(_:)), name: NSNotification.Name("ImageDownloaded"), object: nil)
    }
    
    private func removeObservers() {
        NotificationCenter.default.removeObserver(self)
    }
}

// MARK: - Selectors
extension CharacterDetailsViewController {
    @objc private func imageDownloaded(_ notification: Notification) {
        guard let userInfo = notification.userInfo, let id = userInfo["id"] as? Int64, let data = userInfo["data"] as? Data else { return }
        
        guard let view = self.view as? CharacterDetailsView else { return }
        view.updateImage(UIImage(data: data))
    }
}
