//
//  CharacterListInteractor.swift
//  RickAndMorty
//
//  Created by Muraviov Kyrylo on 30.03.2025.
//  Copyright (c) 2025 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CharacterListBusinessLogic {
    func fetchNextPage()
}

protocol CharacterListDataStore {
    var characters: [CharacterEntity] { get set }
}

class CharacterListInteractor: CharacterListDataStore {
    
    // MARK: - Internal vars
    var presenter: CharacterListPresentationLogic?
    var worker: CharacterListWorker?
    var characters: [CharacterEntity] = []
    var isInternetHasAlreadyDisappeared: Bool = false
    
    // MARK: - Internal logic
    private func fetchCharacters() {
        worker?.fetchCharacters(completion: { characters in
            self.characters.append(contentsOf: characters)
            let response = CharacterList.Response(characters: self.characters)
            self.presenter?.presentCharacters(response: response)
        })
    }
}

// MARK: - Business logic implementation
extension CharacterListInteractor: CharacterListBusinessLogic {
    func fetchNextPage() {
        if Connectivity.isConnectedToInternet {
            if isInternetHasAlreadyDisappeared {
                characters.removeAll()
                worker?.pageZeroing()
                isInternetHasAlreadyDisappeared = false
            }
            fetchCharacters()
        } else {
            isInternetHasAlreadyDisappeared = true
            guard let charactersFromCoreData = worker?.fetchFromCoreData() else { return }
            if characters != charactersFromCoreData {
                characters.removeAll()
                self.characters.append(contentsOf: charactersFromCoreData)
                let response = CharacterList.Response(characters: self.characters)
                self.presenter?.presentCharacters(response: response)
            }
        }
    }
}
