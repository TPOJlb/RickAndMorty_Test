//
//  CharacterListViewController.swift
//  RickAndMorty
//
//  Created by Muraviov Kyrylo on 30.03.2025.
//  Copyright (c) 2025 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol CharacterListDisplayLogic: AnyObject {
    func displayCharacters(viewModel: CharacterList.ViewModel)
}

class CharacterListViewController: UIViewController {
    
    // MARK: - Internal vars
    var interactor: CharacterListBusinessLogic?
    var router: CharacterListRoutingLogic?
    var characters: [CharacterList.ViewModel.DisplayCharacter] = []
    private let characterListView = CharacterListView()
    
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: - Lifecycle
    override func loadView() {
        view = characterListView
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        configuteTableView()
        addObservers()
        interactor?.fetchNextPage()
    }
    
    // MARK: - Setup
    private func setup() {
        let viewController = self
        let interactor = CharacterListInteractor()
        let router = CharacterListRouter()
        let presenter = CharacterListPresenter()
        let worker = CharacterListWorker()
        
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        interactor.worker = worker
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: - Deinit
    deinit {
        removeObservers()
    }
}

// MARK: - Display logic implementation
extension CharacterListViewController: CharacterListDisplayLogic {
    func displayCharacters(viewModel: CharacterList.ViewModel) {
        self.characters = viewModel.characters
        characterListView.tableView.reloadData()
    }
}

// MARK: - Internal logic
extension CharacterListViewController {
    private func configuteTableView() {
        characterListView.tableView.dataSource = self
        characterListView.tableView.delegate = self
        characterListView.tableView.register(CharacterCell.self, forCellReuseIdentifier: "CharacterCell")
    }
    
    private func addObservers() {
        NotificationCenter.default.addObserver(self, selector: #selector(imageDownloaded(_:)), name: NSNotification.Name("ImageDownloaded"), object: nil)
    }
    
    private func removeObservers() {
        NotificationCenter.default.removeObserver(self)
    }
}

// MARK: - Selectors
extension CharacterListViewController {
    @objc private func imageDownloaded(_ notification: Notification) {
        guard let userInfo = notification.userInfo, let id = userInfo["id"] as? Int64, let data = userInfo["data"] as? Data else { return }
        
        if let index = characters.firstIndex(where: { $0.id == id }) {
            characters[index].image = UIImage(data: data)
            characterListView.tableView.reloadRows(at: [IndexPath(row: index, section: 0)], with: .fade)
        }
    }
}

// MARK: - UITableViewDataSource & Delegate implementation
extension CharacterListViewController: UITableViewDataSource, UITableViewDelegate {
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return characters.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        let cell = tableView.dequeueReusableCell(withIdentifier: "CharacterCell", for: indexPath) as! CharacterCell
        let character = characters[indexPath.row]
        cell.configure(name: character.name, image: character.image, ID: character.id, status: character.status)
        return cell
    }
    
    func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
        router?.routeToCharacterDetails()
        tableView.deselectRow(at: indexPath, animated: true)
    }
    
    func scrollViewDidScroll(_ scrollView: UIScrollView) {
        let offsetY = scrollView.contentOffset.y
        let contentHeight = scrollView.contentSize.height
        let tableViewHeight = scrollView.frame.size.height
        
        if offsetY > contentHeight - tableViewHeight * 2 {
            interactor?.fetchNextPage()
        }
    }
}
